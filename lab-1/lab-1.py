#pip install -r lab-1-requirements.txt

#–í–∞—Ä–∏–∞–Ω—Ç 11
# –ú–µ—Ç–æ–¥ –ì–∞—É—Å—Å–∞ —Å –≤—ã–±–æ—Ä–æ–º –≥–ª–∞–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ —Å—Ç–æ–ª–±—Ü–∞–º

# –ó–∞–¥–∞—á–∏:
# +++ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—è
# +++ –í—ã–≤–æ–¥ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã (–≤–∫–ª—é—á–∞—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü –í)
# ‚Ä¢ –í—ã–≤–æ–¥ –≤–µ–∫—Ç–æ—Ä–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö: ùë•1, ùë•2, ‚Ä¶ , ùë•ùëõ
# +++ –í—ã–≤–æ–¥ –≤–µ–∫—Ç–æ—Ä–∞ –Ω–µ–≤—è–∑–æ–∫: ùëü1, ùëü, ‚Ä¶ , ùëün

# –£—Å–ª–æ–≤–∏—è:
# +++ –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –º–∞—Ç—Ä–∏—Ü—ã n<=20
# +++ –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –º–∞—Ç—Ä–∏—Ü—ã, –∫–∞–∫ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —Ç–∞–∫ –∏ –∏–∑ —Ñ–∞–π–ª–∞

# –¢–ï–°–¢–´: 
#       test1.txt - –º–∞—Ç—Ä–∏—Ü–∞ 4—Ö4, –±–µ–∑ –æ—à–∏–±–æ–∫
#       test2.txt - –º–∞—Ç—Ä–∏—Ü–∞ 2—Ö2, –±–µ–∑ –æ—à–∏–±–æ–∫, –±–æ–ª—å—à–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —á–µ–º –Ω—É–∂–Ω–æ
#       test3.txt - –º–∞—Ç—Ä–∏—Ü–∞ 2—Ö2, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
#       test4.txt - –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
#       test5.txt - –º–∞—Ç—Ä–∏—Ü–∞ 2—Ö2, –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã

from art import *
import re
import numpy as np

def log(*args):
    print("\nLOGGER: ",args)


def get_matrix_size():
    while True:
        matrix_size=input("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –º–∞—Ç—Ä–∏—Ü—ã(—Å—Ç—Ä–æ–∫–∞ —Ö –∫–æ–ª–æ–Ω–∫–∞ , max - 20x20): ")
        
        regex_matrix_size=r"\b([1-9]|1\d|20)x([1-9]|1\d|20)\b"

        result = re.fullmatch(regex_matrix_size,matrix_size)
  
        if not result:
            print("\n–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞–∑–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n")
            
        else:
            return matrix_size



def get_free_members(row):
    print("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ —á–ª–µ–Ω—ã: ")

    free_members=[]

    for j in range(row):    
        while True:
            try:
                free_members.append(float(input()))    
            except ValueError:
                print("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–∏–º–≤–æ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                continue
            break
    return free_members
 


def is_matrix_size_from_file_correct(matrix_size):
    regex_matrix_size=r"\b([1-9]|1\d|20)x([1-9]|1\d|20)\b"

    result = re.fullmatch(regex_matrix_size,matrix_size)  
    if not result:
        print("\n–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞–∑–º–µ—Ä–∞.\n")   
        return False         
    return True



def get_matrix_from_file(path):
   
        with open(path,'r',encoding="UTF-8") as f:
            lines = [line.rstrip() for line in f]
            f.close()

        if is_matrix_size_from_file_correct(lines[0]):
            matrix_size_list=lines[0].split('x')
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–µ–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä.")
            return 0
        row=int(matrix_size_list[0])
        col=int(matrix_size_list[1])

        matrix_elements_str=lines[1:(row*col+1)]
        
        matrix_elements_float=[]
        for i in range(len(matrix_elements_str)):
            matrix_elements_float.append(float(matrix_elements_str[i]))
        free_members_str=lines[(row*col+1):(row*col*2+2)]
        free_members=[]
        for i in range(row):
            free_members.append(float(free_members_str[i]))

        if row*col+col<len(lines[1:]):
            print("\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–æ–ª—å—à–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞. –ù–µ –≤—Å–µ —á–∏—Å–ª–∞ –ø–æ–ø–∞–¥—É—Ç –≤ –∫–æ–Ω–µ—á–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É\n")

        count=0

        final_matrix=[]
        for i in range (row):
            my_mas=[]
            for j in range (col):    
                my_mas.append(matrix_elements_float[count])
                count+=1
            final_matrix.append(my_mas)
        return final_matrix,row,col,free_members
     
    

def get_matrix_from_input():
    matrix_size_list=get_matrix_size().split("x")

    row=int(matrix_size_list[0])
    column=int(matrix_size_list[1])
    matrix = []  
    while True:
        print("\n–í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Ç—Ä–∏—Ü—ã –ø–æ—Å—Ç—Ä–æ—á–Ω–æ: ")  
        for i in range(row):       
            row_massive =[]  
            for j in range(column):    
                while True:
                    try:
                        row_massive.append(float(input()))    
                    except ValueError:
                        print("\n–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–∏–º–≤–æ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                        continue
                    break
            matrix.append(row_massive) 
        return matrix,row,column

def print_matrix(matrix):
     for i in range(len(matrix)):
        for j in range(len(matrix[i])):
            if j==len(matrix[i])-1:
                print ("| %5.2f" % (matrix[i][j]), end = " ")
            else:    
                print ("%7.2f" % (matrix[i][j]), end = " ")
        print()
 
def join_matrix_free_members(matrix,free_members,row,col):
        final_matrix=[[0]*(col+1) for i in range(row)]
        for i in range (row):
            for j in range (col+1):
                # log(j)
                if j==col:
                    final_matrix[i][j]=free_members[i]
                else:    
                    final_matrix[i][j]=(matrix[i][j])
        return final_matrix
 


def matrix_max_row(matrix, col,h):
    replace_count=0
    max_element = matrix[col][col]
    max_row = col
    for i in range(col + 1, len(matrix)):
        if abs(matrix[i][col]) > abs(max_element):
            max_element = matrix[i][col]
            max_row = i
    print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ –º–æ–¥—É–ª—é —ç–ª–µ–º–µ–Ω—Ç {h} —Å—Ç–æ–ª–±—Ü–∞ —Ä–∞–≤–µ–Ω %.2f" % max_element)
    # –ø–µ—Ä–µ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫
    if max_row != col:
        matrix[col], matrix[max_row] = matrix[max_row], matrix[col]
        replace_count+=1
        print(f"–ú–∞—Ç—Ä–∏—Ü–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ {col+1} –∏ {max_row+1} —Å—Ç—Ä–æ–∫:")
    else:
        print("–ü–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞")
    print_matrix(matrix)
    return replace_count

 
 
def Gauss(matrix_with_free_members,x):
    try:
        n = len(matrix_with_free_members)
        h=1
        replace_count=0
        for k in range(n - 1):
            replace_count+=matrix_max_row(matrix_with_free_members, k,h)
            for i in range(k + 1, n):
                div = matrix_with_free_members[i][k] / matrix_with_free_members[k][k]
                # log(f" -1: {matrix_with_free_members[i][-1]}")
                matrix_with_free_members[i][-1] -= div * matrix_with_free_members[k][-1]
                for j in range(k, n):
                    matrix_with_free_members[i][j] -= div * matrix_with_free_members[k][j]
            h+=1
            print("–ú–∞—Ç—Ä–∏—Ü–∞ –ø–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: ")
            print_matrix(matrix_with_free_members)
            print("\n")
            
        for k in range(n - 1, -1, -1):
            x[k] = (matrix_with_free_members[k][-1] - sum([matrix_with_free_members[k][j] * x[j] for j in range(k + 1, n) ])) / matrix_with_free_members[k][k]
        log(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫: {replace_count}")
    except ZeroDivisionError:
        print("–î–µ–ª–∏—Ç—å –Ω–∞ –Ω–æ–ª—å –Ω–µ–ª—å–∑—è!")
    return x,matrix_with_free_members,replace_count
 
def Gauss_print(x, matrix_with_free_members,matrix,replace_count,row,free_members):
    det = 1.0
    for i in range(len(matrix)):
        det *=  matrix_with_free_members[i][i]
        # *-1**k, –≥–¥–µ k- —ç—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫
    det *= (-1)**replace_count
    if(not det):
        print("–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å —Ä–∞–≤–µ–Ω 0, –Ω–µ—Ç —Ä–µ—à–µ–Ω–∏–π")
        return
    print("–†–µ—à–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–º –ì–∞—É—Å–∞: ")
    for k in range(len(x)):
        print('x[', k + 1, '] =', "%2.4f" % (x[k]), end = '\n')
    print(" ")
    print('–í—ã–≤–æ–¥ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã (–≤–∫–ª—é—á–∞—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü –í):')
    print_matrix(matrix_with_free_members)
    
    print(" ")
    print("–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª—å:", det)
    nevyazka(x,free_members,matrix,row)
    return x
 

 
def nevyazka(x,free_members,matrix,row):

    result_row = np.zeros((row, 1))
    r = np.zeros((row, 1))
    print('–í–µ–∫—Ç–æ—Ä –Ω–µ–≤—è–∑–∫–∏:')
    for i in range(len(matrix)):
        result_row[i] = 0
        for j in range(len(matrix)):
            result_row[i] += x[j] * matrix[i][j]
        r[i] = result_row[i] - free_members[i]
        print('r[', i + 1, '] =', "%.18f" % (r[i]), end = '\n')


def main():
    tprint("Gauss   method\n(main element)")
    while True:
        try:
            input_choice=int(input("–ö–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –≤–≤–µ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Ç—Ä–∏—Ü—ã? –ù–∞–∂–º–∏—Ç–µ (1), –µ—Å–ª–∏ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –∏–ª–∏ (0), –µ—Å–ª–∏ –∏–∑ —Ñ–∞–π–ª–∞: "))
            if input_choice==1:
                matrix,row,column=get_matrix_from_input()
                free_members=get_free_members(row)

            if input_choice==0:
                
                path=input("\n–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É(test1.txt,...,test5.txt): ")
                matrix,row,column,free_members=get_matrix_from_file(path)
                
            matrix_with_free_members= join_matrix_free_members(matrix,free_members,row,column)
            print("\n–í–∞—à–∞ –º–∞—Ç—Ä–∏—Ü–∞ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫: ")
            print_matrix(matrix_with_free_members)
            print()
            x= np.zeros((row, 1))

            x,matrix_with_free_members,replace_count=Gauss(matrix_with_free_members,x)
            Gauss_print(x, matrix_with_free_members,matrix,replace_count,row,free_members)
            print('')
            del matrix, free_members, matrix_with_free_members

        except (KeyboardInterrupt,EOFError):
            print("–í–´–•–û–î\n")
            break
        except FileNotFoundError:
            print("–¢–∞–∫–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n")
            continue
        except ValueError:
            print("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –í–æ–∑–º–æ–∂–Ω–æ –æ—à–∏–±–∫–∞ –≤–Ω—É—Ç—Ä–∏ —Ñ–∞–π–ª–∞(–µ—Å–ª–∏, –≤—ã –≤–≤–æ–¥–∏–ª–∏ –µ–≥–æ). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑\n")    
            continue
        except IndexError:
            print("\n–ü—É—Å—Ç–æ–π —Ñ–∞–π–ª\n")
            continue
        except UnboundLocalError:
            print("–¢–æ–ª—å–∫–æ (1) –∏–ª–∏ (0) !")
            continue
if __name__=="__main__":
    main()